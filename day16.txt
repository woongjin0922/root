@java.lang 패키지
-자바 lang 패키지는 기본적인 클래스를 담고있고 import/상속
-없이 클래스와 인터페이스를 사용할수 있다

-java.lang 패키지 종류

1.Object : 자바 클래스 최상위 클래스
-자바 최상위 조상클래스 모든 클래스가 생성될떄 상속하지 않아도 자동으로 상속받게 된다
-클래스를 생성하면 object 클래스가 여러 메서드를 오버라이드 할수 있게 된다

1)equals() 메서드 : 동등한 객체 안에서 문자열을 비교한다
2)hashCode() 메서드
-데이터 관리 기법중 찾고자 하는 값을 입력한 후 저장된 위치를
-해시코드로 변환 받는 객체마다 고유한 값을 저장한다.

-hashCode : 오버라이딩 된 객체의 식별된 값
-identityHashCode : 오버라이딩 되지 않는 객체의 주소값
1)String str1 = "123" / String str2 = "123"
-글자값으로 묶인 String객체가 생긴다.(hashcode/identityHashCode)

2)String str1 = new String("123") / String str2 = new String("123")
-(new String(새로운 문자열 인스턴스 생성 : 새로운해시값)
-(hacode: 동일한 해쉬값/identityHashCode : 다르게 구성된 해시값)

3)toString
-문자열을 저장하고 여러가지 정보를 얻을떄 사용하며
-print문으로 객체를 출력할 경우 메서드가 자동으로 실행되어서
-객체의 정보값을 반환해준다. (기본정보값 : 클래스 이름 @ 해시코드)
-메서드를 재정의(오버라이딩)해서 원하는 객체의 정보를 이해할수있는
-글자값으로 쉽게 출력했다.
1.클래스
-인스턴스의 정보를 문자열 (String)으로 제공하는 메서드
public String toString (0 {
           return getClass().getName() + "@"+Integer. toHexString(hashcode)
}   

2.String
문자열 처리하는 객체형 데이터 타입이다.
1)한번 생성된 String 인스턴스는 문자열을 읽어 올수만 있고
변경할수는 없다. final class String : 불변 클래스
2)연산자를 이용해 문자열 결합은 매번 새로운 문자열을 생성한다
가능한 결합횟수를 줄이는것이 좋다 (String단점 : Stringbuffer클래스)

-String 클래스 정의
String 클래스 = 데이터(chat[배열값]) + 메서드(문자열 관련)

-String 클래스 문자열을 만드는 방법
1) 문자열의 리터럴을 지정 :
존재하는 문자열 리터럴이 있으면 새롭게 생성하지 않고
기본의 인스턴스를 재사용한다
-String str1 = "abc";
-String str2 = "abc";

2)String 클래스 생성자를 사용
-String str3 = "new String("abc");
-String str4 = "new String("abc");

3)등가비교연산자 "=="비교
문자열 리터럴 : 동일한 인스턴스를 사용하기 떄문에 true
(문자열로 묶으니깐 주소값이 동일하다)

String 클래스의 생성자 : 서로 다른 인스턴스를 사용하기 때문에
false참고 ) equals()는 String 클래스에서 오버라이딩되었기 때문에 true반환
String 참조형을 이용한 인스턴스 객체의 값을 비교할수있다

4)String 클래스 : (리터럴/공백)
1.문자열 리터럴 (String str1 = "abc")은 클래스 파일이 메모리에 
올라갈떄 JVM(자바가상머신) 있는 상수 저장소(constant pool)에 저장된다

2.문자열 리터럴은 한번 생성하고 수정할 수 없으니 같은 문자열
리터럴은 공유해서 사용한다

-공백(빈 문자열:empty String)
1.내용이 없는 문자열이고 길이가 0인 char형 배열에 저장한다
2.문자열이 초기화(nall -> 빈문자열/유니코드->공백) 

3.Stringbuffer / Stringbuilder

-Stringbuffer / Stringbuilder 정의
1)String 클래스와 달리 내용을 변경할수 있다
-(String : 새로운 배열을 생성 ->배열복사->새로운배열주소를 참조변수저장)
2)내부적으로 문자열을 편집을 위한 버퍼 (Buffer)을 가지고 있어
-버퍼값을 늘려서 사용할수 있다 ( 버퍼의 기본사이즈 :16->필요할때마다 지정) 
3)append 함수를 이용해서 글자를 계속 늘려서 추가 저장할수 있다
4)StringBuffer 인스턴스를 각자 생성해도 같은값일경우 같은 주소가 대입된다

-Stringbuffer / Stringbuilder 차이점
1)Stringbuffer 스레드 환경일경우 안전하도록 동기화가 되어있다
2)스레드 환경이 아닐경우 Stringbuilder 성능이 좋다.

4.Math (수학공식)

5.Wrapper 클래스
1)기본자료형(int,long,double.float..)을 데이터 객체형을 표현한다
8개의 기본형을 객체로 다뤄야할떄 사용하는 클래스이다
2)매개변수로 객체로 요구할때/기본형 값이 아닌(형변환) 참조형으로
저장할때 사용하거나 객체간의 비교를 해야할때 사용한다
3)자바 SE9버전 이후에는 생성자가 폐기
작은 메모리와 빠른 속도의 메서드를 이용할때 사용한다

-오토 박싱 / 언 박싱
박싱 : 기본 데이터 타입 -> wrapper 클래스 변환한다 
언 박싱 :  wrapper 클래스-> 기본 데이터 타입으로 변환한다

6.Number

7.Java.util 패키지 (date클래스 / calendar클래스 : 날짜와 시간 활용)