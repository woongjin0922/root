@예외처리
예러 : 하드웨어 고장으로 인해 응용프로그램이 실행 오류 발생
외부적인 상황으로 코드랑은 상관없이 고장이 생기는 환경이다
(개발자도 대체할수없다)
-인터럽트/입출력/메모리고장
예외 : 개발자의 잘못된 코딩으로 인해서 발생하는 에러를 말한다
예외가 발생하면 프로그램은 곧바로 종료된다
1)일반예외 : 컴파일러가 무조건 예외처리 검사하는 방식
1.자바 컴파일러가 명시적으로 블록을 꼭 사용해서 요구하는 예외상황
(try-catch_finally) : 선택 X 무조건 처리
2)실행예외 : 컴파일러가 예외처리 코드 여부를 검사하지 않는 방식
(try-catch_finally) : 선택
* 에외처리 : 클래스로 구성되어있어요.
-NullPointerException : 객체 인스턴스를 생성했는데 메모리가 없는경우
-NumberFormatException : 잘못된 형변환 (정수/실수단위로 달라지는 부분)
-ArryIndexOutofBoundesException : 배열의 범위가 없는데 배열의 주소를 초과해서 
발생하는 경우

일반예외 > Exception > throwable 상속 받아 만들어진다
실행예외 > RuntiomeException > throwable 상속 받아 만들어진다

@예외처리 문법
예외가 발생되었을때 갑작스러운 종료를 막고자 내부에서
처리하는 코드이다
1) 예외 미처리
코드 진행 에러 발생 > JVM(자바가상머신) 예외 클래스 생성 >
예외 객체 발생지점으로 호출처리 (try-catch) > 비정상 오류

2)예외 처리하기
try{
//에러가 발생할 가능성이 있는 지점
}catch(Exception e){
//예외 처리 코드로 에러로그를 심어놓는다
e.printctack();
}finally{
//항상 실행되는 코드
}

1.실행 예외 소스 코드 (컴파일러시 try-catch)
1.일반 예외 소스 코드 (컴파일러시 무조건 try-catch)
-IOException : 입출력 에러 코드로 확인 할수 있다

@다중 catch 사용하기
-프로그램 처리시 에러발생이 여러개 발생할 경우가 있다
-다중 catch문을 이용해서 예외별 예외처리코드를 다양하게
만들수 있다

@printStackTrace () getMessage ()
예외 클래스 인스턴스 발생한 예외의 정보가 담겨있다

-printStackTrace ()
예외 발생 당시에 호출 스택 있었던 메서드의 정보와 예외 메세지를 
화면에 출력
-getMessage ()
발생한 예외 클래스이 인스턴스에 저장된 메세지를 얻는다

@예외 발생 시키기 
키워드(예약어) throw 사용해서 프로그래머 고의로 에외를 
발생시키는 상황이다.
해당 메서드를 사용하는쪽 처리할수 있게 미루는 방식 코드이다
유지보수 부분과 호출하는 쪽에서 수월하게 처리하는 방법을
선호해서 만든 방식이다

문제1 : 예외던지기 기본 문제
문제1 : 예외던지기 교재369쪽 (호출한 곳에서 예외처리)
-메서드가 호출될떄 호출된 메서드에서 예외처리를 떠안고
출력하는 방식 














