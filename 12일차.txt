변수타입 : 자료형 : 다형성 -> 조상님을 따른다! 상속을 받으면.
public class test {
public static void main ( String [] args) {
Buyer buyer = new Buyer();
buyer.buy(new video());
buyer.buy(new Audio());
     }

}
class Buyer {
       void buy ( 매개변수의 타입 p) {
 System.out.println(p);
        }
}
class Product {}
class Video extends Product {} // 2. 아래와 같이 출력하기 위해 오버라이딩하세요 (15점)
class 
Audio extends Product {} // 6.아래와 같이 출력하기 위해 오버라이딩 하세요 (15점)
----------------------------
출력
Video
Audio

연습문제 : 301쪽
class Speaker
class RedSpeaker
class BlueSpeaker

class Person { //사람 클래스
//기본 생성자
Speaker speaker; 
//메서드 : 색깔 (    크래스:매개변수다향성) 스피커가 켜졌습니다
)

public class PRAcTlce_11_03(

public ctatic void main (String[] args) {

  }
}
--------------------
실행 결과:
빨간 스피커가 켜졌습니다
파란 스피커가 켜졌습니다.

@추상 클래스 :
일반 클래스와 동일하다 -> 추상메서드를 정의해서 사용한다
추상메서드를 추상클래스에서 선언하면 무조건  자식 메서드에서
오버라이딩 해야한다
추상 클래스 : 추상 메서드가 항상 존재한다 (X) 
   absstract    멤버변수와 생성자를 사용할수 있다 (0)
                   추상메서드 선언부에 선언했다
                   추상클래스를 상속받는 클래스는 무조건 오버라이딩 한다 (0)

@인터페이스 : 추상 메서드랑 상수만 선언할수있다 
인터페이스는 클래스가 아니고 스스로 객체를 생성할수있다
어떤 형태로도 객체를 만들수 없기 때문에 클래스라고 부를수없다
인터페이스는 필드와 생성자를 가질수없고 오직 추상메서드와 상수만 포함
interface 인터페이스 이름 {
    public static final 타입 상수 이름 = 값;
    public abstract 메서드 이름 (매개변수목록);
}
1)추상 메서드 집합이라서 추상 클래스보다 추상화가 높다
2)인터페이스 모든 멤버는 public이다. ( 접근제어자 낮은 단계 )
public static final -> 명시안해도 자동 인식한다.(자동적컴파일)

@인터페이스 구현/다형성 사용방법

2)인터페이스 정의된 추상메서드를 완성하며 인터페이스
자체의 추상 메서들르 구현해줄 클래스를 작성해한다
부모 인터페이스 : 메서드를 모두 사용하지 않을 경우
자식 클래스  :  abstract  꼭 정의한다.

2) 클래스는 단일 상속 : 부모의 메서드를 상속받는데 
메서드는 구현부가 존재한다. 메서드가 동일할 경우는
구현부가 다르기 떄문에 자식이 어떤걸 선책할지 모른다.
인터페이스 : 다중 상속이 가능하다 ( 선언부만 존재하기 떄문에 )

3) 인터페이스 다형성 가능하다.
자식 클래스 메서드를 만들고 리턴타입으로 부모형 (인터페이스) 반환이 가능하다
main static : Fightable f = new Fighter(); // 자식객체
Fighter 클래스 메서드를 이요해서 반환가능 ( Fightable method()  {return f; })
  
Q.추상 클래스 인터페이스 공통점?
-미완성 설계도이고 추상메서드를 가지고있다
(모듈화: 독립적인 구현 사용가능 객체변경이 필요할때  수정이 최소화
정보은닉: 실제 구현클래스 내용보지 않아도 개발코드 객체 사용
추상화: 더 생각해서 만들어야하는 부분)
Q.추상 클래스 인터페이스 차이점 ?
-인터페이스 IV(인스턴스멤버 :변수/메서드) 가질수없다
(인터페이스는 추상화가 심화된 상황이며 구현될수없고 추상 메서드로 캡슐화 사용된다)

@다중 인터페이스 구현
[접근제한자] class 자식클래스 이름 implements 인터페이스1, 인터페이스2
        //필드 변수
        //생성자
        //인터페이스1 구현 메서드 (추상 오버라이딩 =구현한다)
        //인터페이스 2 구현 메서드 (추상 오버라이딩 =구현한다)
}
1)인터페이스 각기능들 따로 선언하고 자식들에게 다중상속한다

@인터페이스 장점
[접근제한다] interface 인터페이스 이름 extends 인터페이스1, 인터페이스2 {
//추상 메서드
}
 
@인터페이스 장점
 























